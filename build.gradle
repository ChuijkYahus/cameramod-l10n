plugins {
    id 'dev.architectury.loom' version '1.11-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '9.2.2' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

architectury {
    minecraft = minecraft_version
}

static def listGameVersions(String string1, String string2) {
    // Extract the base version and the starting and ending patch numbers
    String baseVersion = string1
    int startPatch = 0
    int endPatch = Integer.parseInt(string2.split('\\.')[2])

    // Initialize an array to hold the generated versions
    def versions = []

    // Add the base version (string1) to the array
    versions << baseVersion

    // Generate and add the patch versions
    for (int i = startPatch + 1; i <= endPatch; i++) {
        versions << "${baseVersion}.${i}"
    }

    // Return the generated versions
    return versions
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.layered() {
            it.officialMojangMappings {
                setNameSyntheticMembers(false)
            }
            it.parchment("org.parchmentmc.data:parchment-${parchment_version}")
        }
    }

    var env = System.getenv()
    var modLoader = name

    var changelogFile = rootProject.file("changelog.md")
    var changelogText = changelogFile.exists() ? changelogFile.text : ""

    var versions = listGameVersions(minecraft_min_version, minecraft_version)

    if (env.MODRINTH_TOKEN) {
    }

    if (env.CURSEFORGE_TOKEN) {
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = mod_id
    version = mod_version
    group = mod_group_id


    repositories {

        flatDir {
            dirs 'mods'
        }

        mavenLocal()
        mavenCentral()

        maven { url "https://maven.parchmentmc.org" }

        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }

        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/releases"
        }

        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
        }

        maven {
            name = 'Ladysnake Mods'
            url = 'https://maven.ladysnake.org/releases'
        }

        maven { url 'https://jitpack.io' }

        maven {
            url = 'https://maven.neoforged.net'
        }

        maven {
            url = "https://api.modrinth.com/maven"
        }

        maven {
            url = "https://maven.blamejared.com/"
        }

        maven {
            name = "Crystal Nest"
            url = "https://maven.crystalnest.it"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = rootProject.java_version.toInteger()
    }

    java {
        withSourcesJar()
    }
}


ext {
    replaceProperties = [
            minecraft_version    : minecraft_version,
            minecraft_min_version: minecraft_min_version,
            minecraft_max_version: minecraft_max_version,
            pack_format_number   : pack_format_number,

            mod_id               : mod_id,
            mod_name             : mod_name,
            mod_version          : mod_version,
            mod_license          : mod_license,
            mod_authors          : mod_authors,
            mod_description      : mod_description,
            mod_credits          : mod_credits,
            mod_homepage         : mod_homepage,
            mod_github           : mod_github,

            neo_version          : neo_version,
            neo_version_range    : neo_version_range,
            loader_version_range : loader_version_range,
            moonlight_min_version: moonlight_min_version
    ]
}


task buildAndPublishAll {
    dependsOn ':clean'
    dependsOn ':build'
    dependsOn ':neoforge:curseforge'
    dependsOn ':neoforge:modrinth'
    dependsOn ':fabric:curseforge'
    dependsOn ':fabric:modrinth'
}

buildAndPublishAll.group = 'build'
buildAndPublishAll.description = 'Runs clean, build, and publish forge and fabric'

task buildAndPublishAllM {
    dependsOn buildAndPublishAll
    dependsOn ':publishToMavenLocal'
}

buildAndPublishAllM.group = 'build'
buildAndPublishAllM.description = 'Runs clean, build, publish forge and fabric and uploads to maven local'

